import os
import json
import datetime
import openai
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TRANSCRIPTS_DIR = "transcripts"
SUMMARIES_DIR = "summaries"

client = OpenAI(api_key=OPENAI_API_KEY)

openai.api_key = OPENAI_API_KEY

def load_transcript(date=None):
    if date is None:
        date = datetime.date.today()

    filename = os.path.join(TRANSCRIPTS_DIR, f"{date.isoformat()}.json")

    if not os.path.exists(filename):
        print(f"No transcript found for {date.isoformat()}")
        return None

    with open(filename, "r", encoding="utf-8") as f:
        messages = json.load(f)

    return messages

def prepare_prompt(messages):
    filtered_messages = [msg for msg in messages if msg['author'] != "Mava"]

    formatted_messages = []
    for msg in filtered_messages:
        formatted_messages.append(f"[{msg['created_at']}] [{msg['author']}]: {msg['content']}")

    prompt = f"""
üöÄ ROLE
You are ‚ÄúUSUAL Daily Brief‚Äù, a senior crypto-investment analyst writing a concise, high-signal daily email for a USUALx staking-token holder.

üéØ OBJECTIVE
Deliver a DAILY INVESTOR BRIEF that lets the reader decide‚Äîin under 3 minutes‚Äîwhether today‚Äôs chat moves their risk/return view.

‚öôÔ∏è SOURCE MATERIAL
Today‚Äôs cleaned, chronologically-ordered Discord messages follow after the delimiter.

üõ†Ô∏è TASK (do these IN ORDER)
1. **Filter**  
   ‚Ä¢ Discard chatter, emojis, memes, bot ‚ÄúMava‚Äù posts, duplicated messages.  
2. **Detect Topics**  
   ‚Ä¢ Identify up to **10** highest-impact discussions or announcements. Rank by (Relevance √ó Impact) to a USUALx holder.  
3. **Extract Arguments**  
   ‚Ä¢ For each topic, capture the *specific* claims, concerns, or suggestions users voiced (quote snippets if <20 words).  
4. **Assess**  
   ‚Ä¢ For each topic, assign:  
     ‚Äì **Impact Level:** üî¥ High / üü° Moderate / üü¢ Low (effect on USUALx value or risk).  
     ‚Äì **Confidence:** High / Medium / Low (how certain you understood correctly).  
     ‚Äì **Sentiment:** Positive / Neutral / Negative.  
     ‚Äì **Suggested Action:** Monitor | Engage team | No action.  
     ‚Äì Write a 1-to-2 sentence **Analyst Take** giving both an assessment and a credible counter-view.  
5. **Synthesize**  
   ‚Ä¢ Provide a one-line **Top 3 Takeaways** section.  
   ‚Ä¢ Build a **Risk Dashboard** summarising overall mood and any red flags.

üõë CONSTRAINTS
‚Ä¢ Max - 1,000 tokens total.  
‚Ä¢ Write valid, minimal HTML (use <section>, <ul>, <li>, <small>). No CSS needed.  
‚Ä¢ Use UTC timestamps (hh:mm-hh:mm).  
‚Ä¢ Do NOT invent data.

üì§ OUTPUT STRUCTURE (HTML)

<section id="risk-dashboard">
  <h2>Risk Dashboard</h2>
  <p>Overall mood: üü¢ Positive ‚Ä¢ No major red flags were detected.</p>
  <p>Rumours to watch: ‚Ä¶</p>
</section>

<section id="highlights">
  <h2>Top 3 Takeaways</h2>
  <ol>
    <li>...</li>
    <li>...</li>
    <li>...</li>
  </ol>
</section>

<!-- Repeat this block for each Topic (max 10) -->
<section class="topic">
  <h3>Topic # ‚Äì [one-line summary]</h3>
  <p><strong>Key Arguments</strong></p>
  <ul>
    <li>UserA: ‚Äúquoted point or paraphrase‚Ä¶‚Äù</li>
    <li>UserB: ‚Ä¶</li>
  </ul>
  <p>
    <strong>Impact Level:</strong> üü° Moderate |
    <strong>Confidence:</strong> High |
    <strong>Sentiment:</strong> Negative |
    <strong>Suggested Action:</strong> Monitor
  </p>
  <p><em>Analyst Take:</em> assessment sentence. Counter-view sentence.</p>
  <small>Participants: UserA, UserB ‚Ä¢ Timeframe: 10:00‚Äì11:30 UTC</small>
</section>

<hr/>
<small>End of brief ‚Ä¢ Generated by GPT-4o ‚Ä¢ Date: {{today}}</small>

--- END OF TEMPLATE ---

Here are today's cleaned and chronologically ordered chat messages:

"""

    prompt += "\n\n" + "\n".join(formatted_messages)

    return prompt

def generate_summary(prompt):
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a professional crypto community analyst."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.4,
        max_tokens=2000
    )

    return response.choices[0].message.content

def save_summary(summary_text, date=None):
    if date is None:
        date = datetime.date.today()

    os.makedirs(SUMMARIES_DIR, exist_ok=True)

    filename = os.path.join(SUMMARIES_DIR, f"dailyUpdate_{date.isoformat()}.html")  # <-- changed to .html

    if os.path.exists(filename):
        print(f"Overwriting existing summary: {filename}")
    else:
        print(f"Saving new summary: {filename}")

    with open(filename, "w", encoding="utf-8") as f:
        f.write(summary_text)

    print(f"Summary saved to {filename}.")

def run_summarizer():
    messages = load_transcript()
    if not messages:
        return

    prompt = prepare_prompt(messages)
    summary = generate_summary(prompt)

    print("\n===== SUMMARY =====\n")
    print(summary)

    save_summary(summary)

if __name__ == "__main__":
    run_summarizer()
